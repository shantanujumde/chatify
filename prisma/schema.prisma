// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model Text {
    id         Int    @id @default(autoincrement())
    text       String
    text_title String
    text_url   String
    text_date  String

    embedding Embeddings[]
}

model Embeddings {
    id             Int                          @id @default(autoincrement())
    content        String
    content_length Int
    content_tokens Int
    embedding      Unsupported("vector(1536)")?
    openAiResponce Json
    createdAt      DateTime                     @default(now())

    text   Text @relation(fields: [textId], references: [id])
    textId Int
}

model RolesAndPaymentInfo {
    id             Int     @id @default(autoincrement())
    userId         String
    premiumUser    Boolean
    paymentDetails Json
    role           String  @default("user")
    user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String                @id @default(cuid())
    name                String?
    email               String?               @unique
    emailVerified       DateTime?
    image               String?
    password            String?
    accounts            Account[]
    sessions            Session[]
    RolesAndPaymentInfo RolesAndPaymentInfo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
